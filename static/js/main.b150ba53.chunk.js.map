{"version":3,"sources":["Task4/Task4.module.css","Task3/Task3.module.css","common/Checkbox.tsx","common/InputCustom.tsx","common/ButtonCustom.tsx","Task4/Task4.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CheckboxCustom","props","Checkbox","inputProps","InputCustom","TextField","id","label","variant","value","onChange","onKeyPress","ButtonCustom","Button","color","onClick","title","Task4","useState","name","setName","className","s","e","currentTarget","charCode","trim","addName","alert","numb","arrayName","length","App","arr","setArr","newNames","v1","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,mBAAmB,KAAO,sB,mBCAlDD,EAAOC,QAAU,CAAC,IAAM,qB,mNCEXC,EAAiB,SAACC,GAC3B,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,WAAY,CAAE,aAAc,wB,QCE/BC,EAAc,SAACH,GACxB,OAAO,kBAACI,EAAA,EAAD,CAAWC,GAAG,iBACHC,MAAM,+CACNC,QAAQ,WACRC,MAAOR,EAAMQ,MACbC,SAAUT,EAAMS,SAChBC,WAAYV,EAAMU,c,QCP3BC,EAAe,SAACX,GACzB,OAAO,kBAACY,EAAA,EAAD,CACKL,QAAQ,YACRM,MAAM,UACNC,QAASd,EAAMc,SAAUd,EAAMe,QCExC,SAASC,EAAMhB,GAAmB,IAAD,EACZiB,mBAAS,IADG,mBAC7BC,EAD6B,KACvBC,EADuB,KAwBpC,OACI,6BACI,6BACI,wBAAIC,UAAWC,IAAEN,OAAQf,EAAMe,QAEnC,kJAC4B,6BAExB,kBAAC,EAAD,CAAaP,MAAOU,EACbT,SAfE,SAACa,GAClBH,EAAQG,EAAEC,cAAcf,QAeTE,WA9BK,SAACY,GACF,KAAfA,EAAEE,UAAmC,KAAhBN,EAAKO,SAC1BzB,EAAM0B,QAAQR,GACdS,MAAM,yCAAaT,EAAO,MAC1BC,EAAQ,QA4BJ,kBAAC,EAAD,CAAcL,QAzBD,WACD,KAAhBI,EAAKO,SACLzB,EAAM0B,QAAQR,GACdS,MAAM,yCAAaT,EAAO,MAC1BC,EAAQ,MAqBqCJ,MAAO,qDAChD,6BACA,0KAC+B,0BAAMK,UAAWC,IAAEO,MAAO5B,EAAM6B,UAAUC,SAEzE,6BACA,kBAAC,EAAD,Q,6BC8GDC,MA3Bf,WAAgB,IAAD,EACSd,mBAA0B,IADnC,mBACNe,EADM,KACDC,EADC,KAQX,OACI,yBAAKb,UAAWC,IAAEU,KACd,kBAACf,EAAD,CAAOD,MAAM,+CACNW,QATf,SAAiBR,GACb,IACIgB,EAAQ,CADE,CAAC7B,GAAI8B,eAAMjB,KAAMA,IACnB,mBAAgBc,IAC5BC,EAAOC,GACPE,QAAQC,IAAIL,IAMDH,UAAWG,MC3IVM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.b150ba53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Task4_App__3RRnB\",\"numb\":\"Task4_numb__2d6Bd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Task3_App__2Sm6g\"};","import React from \"react\";\r\nimport {Checkbox} from \"@material-ui/core\";\r\n\r\nexport const CheckboxCustom = (props:any) => {\r\n    return (\r\n        <div>\r\n            <Checkbox\r\n                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n            />\r\n        </div>\r\n    )\r\n}","import {TextField} from \"@material-ui/core\";\nimport React, {ChangeEvent, KeyboardEvent} from \"react\";\n\ntype InputCustomType = {\n    value: string\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\n    onKeyPress: (e: KeyboardEvent<HTMLInputElement>) => void\n}\n\nexport const InputCustom = (props: InputCustomType) => {\n    return <TextField id=\"outlined-basic\"\n                      label=\"Ваше имя?\"\n                      variant=\"outlined\"\n                      value={props.value}\n                      onChange={props.onChange}\n                      onKeyPress={props.onKeyPress}\n    />\n}","import {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\ntype ButtonCustomType = {\r\n    onClick: () => void\r\n    title: string\r\n}\r\n\r\nexport const ButtonCustom = (props:ButtonCustomType) => {\r\n    return <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={props.onClick}>{props.title}</Button>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from \"./Task4.module.css\"\r\nimport {CheckboxCustom} from \"../common/Checkbox\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {InputCustom} from \"../common/InputCustom\";\r\nimport {ButtonCustom} from \"../common/ButtonCustom\";\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    addName: (name: string) => void\r\n    arrayName: Array<any>\r\n}\r\n\r\nexport function Task4(props: PropsType) {\r\n    const [name, setName] = useState(\"\");\r\n\r\n\r\n    const onKeyPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13 && name.trim() !== \"\") {\r\n            props.addName(name)\r\n            alert(\"Привет, \" + name + \" !\")\r\n            setName(\"\");\r\n        }\r\n    }\r\n    const onClickForButton = () => {\r\n        if (name.trim() !== \"\") {\r\n            props.addName(name)\r\n            alert(\"Привет, \" + name + \" !\")\r\n            setName(\"\");\r\n        }\r\n    }\r\n    const setNameEvent = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3 className={s.title}>{props.title}</h3>\r\n            </div>\r\n            <div>\r\n                Привет, введи своё имя: <br/>\r\n\r\n                <InputCustom value={name}\r\n                       onChange={setNameEvent}\r\n                       onKeyPress={onKeyPressEnter}/>\r\n\r\n                <ButtonCustom onClick={onClickForButton} title={\"Добавить\"}/>\r\n                <br/>\r\n                <span>\r\n                    Количество имён в массиве: <span className={s.numb}>{props.arrayName.length}</span>\r\n                </span>\r\n                <br/>\r\n                <CheckboxCustom/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\n\n\n\n// 1 ЗАДАНИЕ ИМПОРТЫ\n// import Ava from \"./components/Ava/Ava\";\n// import Name from \"./components/Name/Name\";\n// import Message from \"./components/Message/Message\";\n// import Time from \"./components/Time/Time\";\n// import a from \"./components/Ava/ava.module.css\";\n// import m from \"./components/Message/message.module.css\";\n// import n from \"./components/Name/name.module.css\";\n// import t from \"./components/Time/time.module.css\";\n\n// 2 ЗАДАНИЕ ИМПОРТЫ\n// import {AffairsType, MyAffairs} from \"./MyAffairs/MyAffairs\";\n\n//  3 ЗАДАНИЕ ИМПОРТЫ\n// import {Task3} from \"./Task3/Task3\";\n// import {v1} from \"uuid\";\n// import s from \"./Task3/Task3.module.css\"\n\n\n//  4 ЗАДАНИЕ ИМПОРТЫ\nimport {Task4} from \"./Task4/Task4\";\nimport {v1} from \"uuid\";\nimport s from \"./Task3/Task3.module.css\"\n\n\n\n//  4 ЗАДАНИЕ ИМПОРТЫ\nimport {Task5} from \"./Task5/Task5\";\n// import s from \"../src/Task5/Task5.module.css\"\n\n\n\n// 1 задание\n\n// function App(props: any) {\n//     return (\n//             <div className=\"app-wrapper\">\n//                 <div className={a.ava}>\n//                     <Ava />\n//                 </div>\n//                 <div className={n.name}>\n//                     <Name name=\"Артём\" />\n//                 </div>\n//                 <div className={m.message}>\n//                     <Message sms=\"Привет, не бей палками за говнокод :)\" />\n//                 </div>\n//                 <div className={t.time}>\n//                     <Time time=\"Только что\" />\n//                 </div>\n//             </div>\n//     );\n// }\n\n// 2. Задание\n\n// export type FilterValue = \"all\" | \"low\" | \"middle\" | \"hight\";\n//\n// function App() {\n//     let [affairs, setAffairs] = useState<Array<AffairsType>>([\n//         {id: 1, name: \"Учёба\", priority: \"hight\"},\n//         {id: 2, name: \"Работа\", priority: \"middle\"},\n//         {id: 3, name: \"Спорт\", priority: \"hight\"},\n//         {id: 4, name: \"Астрономия\", priority: \"low\"},\n//         {id: 5, name: \"Сериалы\", priority: \"low\"},\n//     ]);\n//\n//     let [filter, setFilter] = useState<FilterValue>(\"all\")\n//\n//     function removeAffair(id: number) {\n//         let filteredAffairs = affairs.filter( a => a.id !== id)\n//         setAffairs(filteredAffairs)\n//     }\n//\n//     function changeFilter(value:FilterValue){\n//         setFilter(value);\n//     }\n//\n//     let AffairsFor = affairs;\n//     if(filter === \"low\"){\n//         AffairsFor = affairs.filter( a => a.priority === \"low\" );\n//     }\n//     if(filter === \"middle\"){\n//         AffairsFor = affairs.filter( a => a.priority === \"middle\" );\n//     }\n//     if(filter === \"hight\"){\n//         AffairsFor = affairs.filter( a => a.priority === \"hight\" );\n//     }\n//\n//\n//     return (\n//         <div>\n//             <MyAffairs title=\"Список приоритетов\"\n//                        affairs={AffairsFor}\n//                        removeAffair={removeAffair}\n//                        changeFilter={changeFilter}\n//             />\n//         </div>\n//     )\n//\n// }\n\n// 3. Задание\n// type NameType =  {\n//     name: string,\n//     id: string\n// }\n//\n// function App() {\n//     let [arr, setArr] = useState<Array<NameType>>([]);\n//     function addName(name: string) {\n//         let newName = {id: v1(), name: name };\n//         let newNames = [newName, ...arr];\n//         setArr(newNames);\n//         console.log(arr);\n//     }\n//     return(\n//         <div className={s.App}>\n//             <Task3 title=\"ЗАДАНИЕ 3\"\n//                    addName={addName}\n//                    arrayName={arr}\n//\n//             />\n//         </div>\n//     )\n// }\n\n\n// 4. Задание\n\ntype NameType =  {\n    name: string,\n    id: string\n}\n\nfunction App() {\n    let [arr, setArr] = useState<Array<NameType>>([]);\n    function addName(name: string) {\n        let newName = {id: v1(), name: name };\n        let newNames = [newName, ...arr];\n        setArr(newNames);\n        console.log(arr);\n    }\n    return(\n        <div className={s.App}>\n            <Task4 title=\"ЗАДАНИЕ 4\"\n                   addName={addName}\n                   arrayName={arr}\n            />\n        </div>\n    )\n}\n\n// function App() {\n//     return (\n//         <div className={s.App}>\n//             <Task5 title=\"Задание 5\"/>\n//         </div>\n//     )\n// }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}